{
  "name": "Missing-link",
  "tagline": "Automatically exported from code.google.com/p/missing-link",
  "body": "[![GitHub release](https://img.shields.io/github/release/p120ph37/missing-link.svg)](https://github.com/p120ph37/missing-link/releases/latest)\r\n[![GitHub license](https://img.shields.io/github/license/p120ph37/missing-link.svg)](https://github.com/p120ph37/missing-link/blob/master/LICENSE)\r\n\r\nDevelopment:\r\n\r\n[![Build Status](https://travis-ci.org/p120ph37/missing-link.svg?branch=master)](https://travis-ci.org/p120ph37/missing-link)\r\n[![Download Snapshot](https://img.shields.io/bintray/v/p120ph37/generic/missing-link.svg)](https://bintray.com/p120ph37/generic/missing-link/_latestVersion)\r\n\r\n\r\n# missing link Ant http task\r\n\r\n## Overview\r\n\r\nThe missing link ant http task was created due to the lack of a full featured, usable and liberally licensed ant HTTP task. This ant task is coded from scratch utilizing only core Java classes; as such it does not require any third party dependencies at runtime.\r\n\r\nThis ant task also simplifies common aspects of HTTP communication, which other libraries seem to needlessly complicate, such as: authentication, TLS/SSL and HTTP methods other then GET and POST.\r\n\r\n\r\n## License\r\n\r\nThe missing link ant http task is licensed under the Apache 2.0 license, a copy of the license can be found with the missing link ant http task distribution or at http://www.apache.org/licenses/LICENSE-2.0.html.\r\n\r\n\r\n## Features\r\n\r\nThe missing link ant http task was created with the following features in mind:\r\n\r\n- No third party library dependencies.\r\n- TLS/SSL support on a configuration, per-connection basis, not JVM-wide.\r\n- Support for HTTP methods GET, POST, PUT, OPTIONS, HEAD and TRACE.\r\n- Support for BASIC authentication.\r\n- Support for multiple URL/URI building options.\r\n- Support for specifying arbitrary HTTP request headers.\r\n- Support for specifying a request entity in-line or through a file.\r\n- Options on what information to print to the output.\r\n- Options to govern what response status codes are expected, and what should cause a build-failing exception.\r\n\r\n\r\n## Ant task XML elements\r\n\r\n### http\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`url`** | HTTP URL | Yes |   | `http://www.google.com` |\r\n| **`method`** | HTTP method | No | `GET` | `GET`, `PUT`, `POST`, etc. |\r\n| **`printRequest`** | Print request entity | No | `false` | `true` or `false` |\r\n| **`printResponse`** | Print response entiry | No | `false` | `true` or `false` |\r\n| **`printRequestHeaders`** | Print request headers | No | `true` | `true` or `false` |\r\n| **`printResponseHeaders`** | Print response headers | No | `true` | `true` or `false` | `expected` | Expected HTTP status | No | `200` | `200`, `201`, `404`, etc. |\r\n| **`failOnUnexpected`** | Fail on unexpected status | No | `true` | `true` or `false` | `outfile` | Write response to file | No |   | Any filename |\r\n| **`statusProperty`** | Property to save status to | No |   | `http.status` |\r\n| **`update`** | Update/overwrite outfile | No | `true` | `true` or `false` |\r\n| **`entityProperty`** | Write response entity to prop | No |   | `response.entity` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http\r\n  url=\"http://google.com\"\r\n  method=\"GET\"\r\n  printRequest=\"false\"\r\n  printResponse=\"true\"\r\n  printRequestHeaders=\"true\"\r\n  printResponseHeaders=\"true\"\r\n  expected=\"200\"\r\n  failOnUnexpected=\"false\"\r\n/>\r\n```\r\n\r\n### http/credentials\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`username`** | HTTP Basic username | Yes |   | `john.doe` |\r\n| **`password`** | HTTP Basic password | No |   | `p@55w0rd` |\r\n| **`show`** | Print the credentials | No | `false` | `true` or `false` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <credentials username=\"john.doe\" password=\"p@55w0rd\" />\r\n</http>\r\n```\r\n\r\n\r\n### http/keystore\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`file`** | KeyStore file | Yes |   | `/path/to/keystore.jks` |\r\n| **`password`** | KeyStore password | No |   | `p@55w0rd` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <keystore file=\"/path/to/keystore.jks\" password=\"p@55w0rd\" />\r\n</http>\r\n```\r\n\r\n\r\n### http/headers/header\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`name`** | Header name | Yes |   | `Accept` |\r\n| **`value`** | Header value | No |   | `application/xml,*/*` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <headers>\r\n    <header name=\"Accept\" value=\"application/xml,*/*\" />\r\n    <header name=\"Content-Type\" value=\"application/xml\" />\r\n  </headers>\r\n</http>\r\n```\r\n\r\n\r\n### http/query/parameter\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`name`** | Query parameter name | Yes |   | `qp` |\r\n| **`value`** | Query parameter value | No |   | `value123` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <query>\r\n    <parameter name=\"qp1\" value=\"value1\" />\r\n    <parameter name=\"qp2\" value=\"value2\" />\r\n  </query>\r\n</http>\r\n```\r\n\r\n\r\n### http/entity\r\n\r\n#### supported parameters:\r\n\r\n| Name | Description | Required | Default | Example |\r\n|------|-------------|----------|---------|---------|\r\n| **`file`** | File to read entity from | No |   | `request.xml` |\r\n| **`binary`** | Treat entity as binary | False |   | `true` or `false` |\r\n| **`value`** | Value to use as entity | No |   | `${my.prop}` |\r\n\r\n#### example:\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <entity file=\"request.zip\" binary=\"true\" />\r\n</http>\r\n```\r\n\r\n```xml\r\n<http url=\"http://google.com\">\r\n  <entity><![CDATA[Request Entity]]></entity>\r\n</http>\r\n```\r\n\r\n\r\n## Ant configuration\r\n\r\nThe following is a basic example of how to import and use the missing link ant http task:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project name=\"ml-ant-http\" basedir=\".\" default=\"http-get\">\r\n\r\n  <property name=\"ml-ant-http.jar\" value=\"ml-ant-http-1.0.jar\" />\r\n  \r\n  <fileset id=\"runtime.libs\" dir=\".\">\r\n    <include name=\"${ml-ant-http.jar}\" />\r\n  </fileset>\r\n  \r\n  <path id=\"runtime.classpath\">\r\n    <fileset refid=\"runtime.libs\" />\r\n  </path>\r\n  \r\n  <taskdef name=\"http\" classname=\"org.missinglink.ant.task.http.HttpClientTask\">\r\n    <classpath refid=\"runtime.classpath\" />\r\n  </taskdef>\r\n  \r\n  <target name=\"http-get\">\r\n    <http url=\"http://www.google.com\" />\r\n  </target>\r\n  \r\n</project>\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}